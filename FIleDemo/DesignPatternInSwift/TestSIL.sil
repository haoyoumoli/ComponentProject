sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

func add(a: Int, b: Int) -> Int

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// add(a:b:)
sil hidden @$s7TestSIL3add1a1bS2i_SitF : $@convention(thin) (Int, Int) -> Int {
// %0 "a"                                         // users: %4, %2
// %1 "b"                                         // users: %5, %3
bb0(%0 : $Int, %1 : $Int):
  debug_value %0 : $Int, let, name "a", argno 1   // id: %2
  debug_value %1 : $Int, let, name "b", argno 2   // id: %3
  %4 = struct_extract %0 : $Int, #Int._value      // user: %7
  %5 = struct_extract %1 : $Int, #Int._value      // user: %7
  %6 = integer_literal $Builtin.Int1, -1          // user: %7
  %7 = builtin "sadd_with_overflow_Int64"(%4 : $Builtin.Int64, %5 : $Builtin.Int64, %6 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %9, %8
  %8 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 0 // user: %11
  %9 = tuple_extract %7 : $(Builtin.Int64, Builtin.Int1), 1 // user: %10
  cond_fail %9 : $Builtin.Int1, "arithmetic overflow" // id: %10
  %11 = struct $Int (%8 : $Builtin.Int64)         // user: %12
  return %11 : $Int                               // id: %12
} // end sil function '$s7TestSIL3add1a1bS2i_SitF'

// static Int.+ infix(_:_:)
sil public_external [transparent] [serialized] @$sSi1poiyS2i_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Int {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %6
  %4 = struct_extract %1 : $Int, #Int._value      // user: %6
  %5 = integer_literal $Builtin.Int1, -1          // user: %6
  %6 = builtin "sadd_with_overflow_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64, %5 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %8, %7
  %7 = tuple_extract %6 : $(Builtin.Int64, Builtin.Int1), 0 // user: %12
  %8 = tuple_extract %6 : $(Builtin.Int64, Builtin.Int1), 1 // user: %11
  br bb1                                          // id: %9

bb1:                                              // Preds: bb0
  br bb2                                          // id: %10

bb2:                                              // Preds: bb1
  cond_fail %8 : $Builtin.Int1, "arithmetic overflow" // id: %11
  %12 = struct $Int (%7 : $Builtin.Int64)         // user: %13
  return %12 : $Int                               // id: %13
} // end sil function '$sSi1poiyS2i_SitFZ'



// Mappings from '#fileID' to '#filePath':
//   'TestSIL/TestSIL.swift' => 'TestSIL.swift'


