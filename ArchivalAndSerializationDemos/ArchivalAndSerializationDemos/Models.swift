//
//  Location.swift
//  ArchivalAndSerializationDemos
//
//  Created by apple on 2022/2/17.
//

import Foundation
import UIKit


//文档地址: https://github.com/apple/swift-evolution/blob/master/proposals/0166-swift-archival-serialization.md

public struct Location {
    public let latitude: Double
    public let longitude: Double
}


public enum Animal: Int {
    case chicken = 1
    case dog
    case turkey
    case cow
}
extension Animal: CaseIterable {}

public struct Farm {
    public let name:String
    public let location: Location
    public let animals: [Animal]
}

struct Record: Codable {
    let id: Int
    let name: String
    let timestamp: Double
    
    public init(id:Int,name:String,timestamp:Double) {
        self.id = id
        self.name = name
        self.timestamp = timestamp
    }
    
    private enum Keys: CodingKey {
        case id
        case properties
    }
    
    private enum PropertiesKeys: CodingKey {
        case name
        case timestamp
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Keys.self)
        try container.encode(id, forKey: .id)
        var nested = container.nestedContainer(keyedBy: PropertiesKeys.self, forKey: .properties)
        try nested.encode(name, forKey: .name)
        try nested.encode(timestamp, forKey: .timestamp)
    }
    
    
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: Keys.self)
        id = try container.decode(Int.self, forKey: .id)
        let nested = try container.nestedContainer(keyedBy: PropertiesKeys.self, forKey: .properties)
        name = try nested.decode(String.self, forKey: .name)
        timestamp = try nested.decode(Double.self, forKey: .timestamp)
    }
}

public struct Person: Encodable {
    public static let codingUserInfoKey = CodingUserInfoKey(rawValue: "com.foocorp.person.codingUserInfoKey")!
    public struct UserInfo {
        let shouldEncodePrivateFields:Bool
    }
    
    public func encode(to encoder: Encoder) throws {
        if let context = encoder.userInfo[Person.codingUserInfoKey] as? Person.UserInfo {
            if context.shouldEncodePrivateFields {
                //...
                
            }
        }
        
        /**
         let encoder = ... 
         encoder.userInfo[Person.codingUserInfoKey] = Person.UserInfo(...)
         let data = try encoder.encode(person)
         */
    }
    
}

//MARK: - 编译器自动生成的代码

extension Location:Codable {
    
//    private enum CodingKeys: CodingKey {
//        case latitude
//        case longitude
//    }
//    public func encode(to encoder: Encoder) throws {
//        var container = encoder.container(keyedBy: CodingKeys.self)
//        try container.encode(latitude, forKey: .latitude)
//        try container.encode(longitude, forKey: .longitude)
//
//    }
//
//    public init(from decoder: Decoder) throws {
//        let container = try decoder.container(keyedBy: CodingKeys.self)
//        latitude = try container.decode(Double.self, forKey: .latitude)
//        longitude = try container.decode(Double.self, forKey: .longitude)
//    }
    
    
}


//编译器自动生成
extension Farm: Codable {
    
//    private enum CodingKeys: CodingKey {
//        case name
//        case location
//        case animals
//    }
//
//    public func encode(to encoder: Encoder) throws {
//        var container =  encoder.container(keyedBy: CodingKeys.self)
//        try container.encode(name, forKey: .name)
//        try container.encode(location, forKey: .location)
//        try container.encode(animals, forKey: .animals)
//    }
//
//    public init(from decoder: Decoder) throws {
//        let container = try decoder.container(keyedBy: CodingKeys.self)
//        name = try container.decode(String.self, forKey: .name)
//        location = try container.decode(Location.self, forKey: .location)
//        animals = try container.decode([Animal].self, forKey: .animals)
//    }
}

// Continuing example from before; below is automatically generated by the compiler if no customization is needed.

extension Animal:Codable {
//    //编译器自动生成
//    public func encode(to encoder: Encoder) throws {
//
//        // Encode as a single value; no keys.
//        var container = encoder.singleValueContainer()
//        try container.encode(self.rawValue)
//    }
//
//    public init(from decoder: Decoder) throws {
//        // Decodes as a single value; no keys.
//        let intValue = try decoder.singleValueContainer().decode(Int.self)
//        if let value = Self(rawValue: intValue) {
//            self = value
//        } else {
//            throw CocoaError.error(.coderReadCorrupt)
//        }
//    }
}
